/*
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.SigniFlowup.connect.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.SigniFlowup.connect.JSON;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * #### Document Prepper Field Types  &#x60; 0  &#x3D; Signature 1  &#x3D; NameText 2  &#x3D; DateText 3  &#x3D; EmailAddressText 4  &#x3D; ContactNumberText 5  &#x3D; PlainText 6  &#x3D; PlainTextOptional 7  &#x3D; FaceToface 8  &#x3D; Initial 9  &#x3D; CheckBox 10 &#x3D; F2FInitial 11 &#x3D; AddressText 12 &#x3D; CompanyNameText 13 &#x3D; OptionalCurrencyText 14 &#x3D; MandatoryCurrencyText 15 &#x3D; ReadOnlyText 16 &#x3D; NumericFieldOpt 17 &#x3D; NumericFieldMand 18 &#x3D; EmailInputOptional 19 &#x3D; EmailInput &#x60;
 */
public enum FieldType {
  
  /**
   * Signature
   */
  Signature(0),
  
  /**
   * NameText
   */
  NameText(1),
  
  /**
   * DateText
   */
  DateText(2),
  
  /**
   * EmailAddressText
   */
  EmailAddressText(3),
  
  /**
   * ContactNumberText
   */
  ContactNumberText(4),
  
  /**
   * PlainText
   */
  PlainText(5),
  
  /**
   * PlainTextOptional
   */
  PlainTextOptional(6),
  
  /**
   * FaceToface
   */
  FaceToface(7),
  
  /**
   * Initial
   */
  Initial(8),
  
  /**
   * CheckBox
   */
  CheckBox(9),
  
  /**
   * F2FInitial
   */
  F2FInitial(10),
  
  /**
   * AddressText
   */
  AddressText(11),
  
  /**
   * CompanyNameText
   */
  CompanyNameText(12),
  
  /**
   * OptionalCurrencyText
   */
  OptionalCurrencyText(13),
  
  /**
   * ReadOnlyText
   */
  ReadOnlyText(14),
  
  /**
   * NumericFieldOpt
   */
  NumericFieldOpt(15),
  
  /**
   * NumericFieldMand
   */
  NumericFieldMand(16),
  
  /**
   * EmailInputOptional
   */
  EmailInputOptional(17),
  
  /**
   * EmailInput
   */
  EmailInput(18),
  
  NUMBER_19(19);

  private Integer value;

  FieldType(Integer value) {
    this.value = value;
  }

  @JsonValue
  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static FieldType fromValue(Integer value) {
    for (FieldType b : FieldType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}


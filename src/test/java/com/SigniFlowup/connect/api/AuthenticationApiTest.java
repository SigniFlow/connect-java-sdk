/*
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.SigniFlowup.connect.api;

import com.SigniFlowup.connect.*;
import com.SigniFlowup.connect.auth.*;
import com.SigniFlowup.connect.models.LoginRequest;
import com.SigniFlowup.connect.models.LoginResponse;
import com.SigniFlowup.connect.models.LogoutRequest;
import com.SigniFlowup.connect.models.LogoutResponse;
import com.SigniFlowup.connect.models.TokenExtendRequest;
import com.SigniFlowup.connect.models.TokenExtendResponse;
import com.SigniFlowup.connect.models.TokenValidateRequest;
import com.SigniFlowup.connect.models.TokenValidateResponse;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    /**
     * Login
     *
     * #### Generates a API Token for the User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        //String contentType = null;
        //LoginRequest loginRequest = null;
        //LoginResponse response = api.login(contentType, loginRequest);
        // TODO: test validations
    }

    /**
     * Logout
     *
     * #### Used to log out a user from SigniFlow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postLogoutTest() throws ApiException {
        //String contentType = null;
        //LogoutRequest logoutRequest = null;
        //LogoutResponse response = api.postLogout(contentType, logoutRequest);
        // TODO: test validations
    }

    /**
     * Token Extend
     *
     * #### Used to extend the period of time in which the session token is valid.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTokenExtendTest() throws ApiException {
        //String contentType = null;
        //TokenExtendRequest tokenExtendRequest = null;
        //TokenExtendResponse response = api.postTokenExtend(contentType, tokenExtendRequest);
        // TODO: test validations
    }

    /**
     * Token Validate
     *
     * #### Used to validate the user&#39;s session token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTokenValidateTest() throws ApiException {
        //String contentType = null;
        //TokenValidateRequest tokenValidateRequest = null;
        //TokenValidateResponse response = api.postTokenValidate(contentType, tokenValidateRequest);
        // TODO: test validations
    }

}
